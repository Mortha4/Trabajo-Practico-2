---
import GenericLayout from "../layouts/GenericLayout.astro";
import UserPortalNavbar from "../components/UserPortalNavbar.astro";
import ProfileDashboard from "../components/ProfileDashboard.astro";
---

<GenericLayout title="Dashboard" class="blue-background">
    <UserPortalNavbar />

    <main>
        <ProfileDashboard
            container-class="is-flex is-justify-content-space-around is-align-items-stretch"
        >
            <div
                class="stats-flex is-flex is-flex-grow-1 is-justify-content-center is-align-items-center"
            >
                <div>
                    <h2 class="is-size-4-tablet is-size-5-mobile">Collected</h2>
                    <h4>0/20</h4>
                </div>
                <div>
                    <h2 class="is-size-4-tablet is-size-5-mobile">Seen</h2>
                    <h4>0/20</h4>
                </div>
            </div>
        </ProfileDashboard>

        <div
            class="cardpacks-container section is-medium is-flex is-justify-content-space-around is-flex-wrap-wrap"
        >
            <card-pack ></card-pack>
            <card-pack ></card-pack>
            <card-pack ></card-pack>
        </div>
    </main>
</GenericLayout>

<style>
    @import url("https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap");

    :global(:root) {
        --bulma-body-background-color: #8bc6ec;
    }

    body {
        font-family: "Open Sans";
    }

    .stats-flex {
        gap: 20px;
    }
</style>

<script>

    import { API_URL } from "astro:env/client";
    import { user } from "../scripts/fetchUser";


        //funcion para consumir paquetes
        async function fetchCardPacks(query = "") {
            const cardpacksResponse = await fetch(
                `${API_URL}/api/v1/users/${user.username}/cardpacks${query}`,
                {
                    headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                    },
                    method: "GET",
                    credentials: "include",
                }
            );

            if (cardpacksResponse.status === 200) return await cardpacksResponse.json();
            else console.error(cardpacksResponse);
        }

        function populateDashboard(cardpacks: any[]){

            //tomamos el contenedor de packs y lo vaciamos
            const cardpacks_container = document.querySelector(
                ".cardpacks-container"
            ) as HTMLDivElement;
            cardpacks_container.innerHTML = "";

        

            for(const cardpack of cardpacks){
                const CardPackNuevo=document.createElement("card-pack");
                CardPackNuevo.setAttribute("title",cardpack.title);
                CardPackNuevo.setAttribute("wrapperimageurl",cardpack.wrapperImageUrl);
                CardPackNuevo.setAttribute("cooldown",cardpack.cooldown);
                CardPackNuevo.setAttribute("lastopened",cardpack.lastOpened);
                cardpacks_container?.appendChild(CardPackNuevo);

            }



        }

        //variable donde se almacena el consumido
        let cardpacks=await fetchCardPacks();
        populateDashboard(cardpacks);
        console.log(cardpacks);


</script>
