---
// TODO: Collection stats should be queried at runtime
// TODO: Change RadioTabs to a dropdown on small viewport (width < 550)
// TODO: Center cards when theres only one column
import GenericLayout from "../layouts/GenericLayout.astro";
import UserPortalNavbar from "../components/UserPortalNavbar.astro";
import CardPack from "../components//CompactCardPack.astro";
import Card from "../components/Card.astro";
import CardFilter from "../components/CardFilter.astro";
import RadioTabs from "../components/RadioTabs.astro";
import ProfileDashboard from "../components/ProfileDashboard.astro";
import SearchBar from "../components/SearchBar.astro";
import StickyTopbar from "../components/StickyTopbar.astro";
const API_URL = import.meta.env.API_URL;
const FRONT_URL = import.meta.env.FRONT_URL;
const formId = "card-filter-form";
const emptyResultMessageId = "empty-result-message";
---

<GenericLayout title="Collection">
    <script
        define:vars={{ API_URL, formId, emptyResultMessageId }}
        type="module"
    >
        async function fetchCards(query = "") {
            const cardsResponse = await fetch(
                `${API_URL}/api/v1/users/${user.username}/cards${query}`,
                {
                    headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                    },
                    method: "GET",
                    credentials: "include",
                }
            );

            if (cardsResponse.status === 200) return await cardsResponse.json();
            else console.error(cardsResponse);
        }

        function populateCollection(cards) {
            const message = document.getElementById(emptyResultMessageId);
            if (cards.length === 0) message.classList.remove("is-hidden");
            else message.classList.add("is-hidden");

            const grouping = document.querySelector(
                "input[name=grouping]:checked"
            ).value;
            let groupingFunction;
            if (grouping === "season") {
                groupingFunction = (card) =>
                    card.season.slice(0, "Season".length) +
                    " " +
                    card.season.slice("Season".length);
            } else if (grouping === "rarity") {
                groupingFunction = (card) => card.rarity;
            } else return console.error("unknown grouping");

            const groups = Object.groupBy(cards, groupingFunction);

            const collection = document.querySelector(".cards");
            collection.innerHTML = "";
            for (const group in groups) {
                const cards = groups[group];

                const separator = document.createElement("h1");
                separator.textContent = group;
                // separator.appendChild(document.createElement("hr"));
                collection.appendChild(separator);

                for (const card of cards) {
                    card["art-url"] = card.artUrl;
                    delete card.artUrl;
                    const gameCard = document.createElement("game-card");
                    $(gameCard).attr(card);
                    collection?.appendChild(gameCard);
                }
            }
        }

        async function handleSearch(event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const urlParams = new URLSearchParams();
            for (const [key, value] of formData.entries())
                if (value.toString().trim() !== "")
                    urlParams.append(key, value.toString());
            cards = await fetchCards(`?${urlParams.toString()}`);
            populateCollection(cards);
        }
        const response = await fetch(`${API_URL}/api/v1/session`, {
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
            },
            credentials: "include",
        });

        if (response.status !== 200) window.location.replace(`/login`);

        const user = await response.json();
        let cards = await fetchCards();
        populateCollection(cards);

        document
            .querySelectorAll("input[name=grouping]")
            .forEach((input) =>
                input.addEventListener("change", () =>
                    populateCollection(cards)
                )
            );

        document
            .getElementById(formId)
            .addEventListener("submit", handleSearch);
    </script>
    <UserPortalNavbar />
    <main>
        <ProfileDashboard>
            <div slot="stats">
                <h2 slot="stat-1" class="is-size-4-tablet is-size-5-mobile">
                    Collected
                </h2>
                <h4 slot="stat-1">0/20</h4>
            </div>
            <div slot="stats">
                <h2 slot="stat-2" class="is-size-4-tablet is-size-5-mobile">
                    Seen
                </h2>
                <h4 slot="stat-2">0/20</h4>
            </div>
            <CardPack
                slot="card-packs"
                compact
                pack-title="Goofy ahh pack"
                last-opened={new Date(
                    new Date().getDate() - 1000 * 60 * 60 * 10
                ).toISOString()}
            />
            <CardPack
                slot="card-packs"
                compact
                class="is-hidden-touch is-hidden-desktop-only"
                compact
                pack-title="Rumbumptious pack"
                last-opened={new Date(
                    new Date().getDate() - 1000 * 10
                ).toISOString()}
            />
        </ProfileDashboard>
        <section class="collection p-5">
            <StickyTopbar>
                <SearchBar
                    id={formId}
                    class="is-flex-grow-1"
                    name="title"
                    placeholder="Card name"
                >
                    <CardFilter />
                </SearchBar>
                <RadioTabs>
                    <li>
                        <label>
                            Season
                            <input
                                checked
                                name="grouping"
                                value="season"
                                type="radio"
                                autocomplete="off"
                            />
                        </label>
                    </li>
                    <li>
                        <label>
                            Rarity
                            <input
                                name="grouping"
                                value="rarity"
                                type="radio"
                                autocomplete="off"
                            />
                        </label>
                    </li>
                </RadioTabs>
            </StickyTopbar>
            <h1
                id={emptyResultMessageId}
                class="is-hidden subtitle has-text-centered"
            >
                No cards to display.
            </h1>
            <div class="cards"></div>
        </section>
    </main>
</GenericLayout>
<style is:global>
    .collection > .cards {
        display: grid;
        height: 100%;
        gap: 10px;
        justify-content: space-between;
        align-content: space-around;
        grid-template-columns: repeat(auto-fill, 2.5in);
        grid-auto-rows: auto;
    }

    .collection > .cards > h1 {
        grid-column: 1 / -1;
        border-bottom: 1px solid var(--bulma-body-color);
        font-size: var(--bulma-size-3);
        margin: 0;
        margin-top: var(--bulma-size-6);
    }

    .cards > h1:first-child {
        margin-top: 0;
    }
</style>
