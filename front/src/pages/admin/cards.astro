---
import GenericLayout from "../../layouts/GenericLayout.astro";
import UserPortalNavbar from "../../components/UserPortalNavbar.astro";
import RadioTabs from "../../components/RadioTabs.astro";
import ProfileDashboard from "../../components/ProfileDashboard.astro";
import StickyTopbar from "../../components/StickyTopbar.astro";
const API_URL = import.meta.env.API_URL;
const formId = "card-filter-form";
const emptyResultMessageId = "empty-result-message";
---

<GenericLayout title="Collection">
    <script
        define:vars={{ API_URL, formId, emptyResultMessageId }}
        type="module"
    >
        async function fetchCards(query = "") {
            const cardsResponse = await fetch(
                `${API_URL}/api/v1/cards${query}`,
                {
                    headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                    },
                    method: "GET",
                    credentials: "include",
                }
            );

            if (cardsResponse.status === 200) return await cardsResponse.json();
            else console.error(cardsResponse);
        }

        async function deleteCard(cardName) {
            const response = await fetch(
                `${API_URL}/api/v1/cards/${cardName}`,
                {
                    method: "DELETE",
                    headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                    },
                    credentials: "include",
                }
            );

            if (response.status === 200) {
                console.log(`Card ${cardName} deleted successfully`);
                return true;
            } else {
                console.error(`Error deleting card ${cardName}:`, response);
                return false;
            }
        }

        function populateCollection(cards) {
            const message = document.getElementById(emptyResultMessageId);
            if (cards.length === 0) message.classList.remove("is-hidden");
            else message.classList.add("is-hidden");

            const grouping = document.querySelector(
                "input[name=grouping]:checked"
            ).value;
            let groupingFunction;
            if (grouping === "season") {
                groupingFunction = (card) =>
                    card.season.slice(0, "Season".length) +
                    " " +
                    card.season.slice("Season".length);
            } else if (grouping === "rarity") {
                groupingFunction = (card) => card.rarity;
            } else return console.error("unknown grouping");

            const groups = Object.groupBy(cards, groupingFunction);

            const collection = document.querySelector(".cards");
            collection.innerHTML = "";
            for (const group in groups) {
                const cards = groups[group];

                const separator = document.createElement("h1");
                separator.textContent = group;
                collection.appendChild(separator);

                for (const card of cards) {
                    card["art-url"] = card.artUrl;
                    delete card.artUrl;

                    const gameCard = document.createElement("game-card");
                    $(gameCard).attr(card);
                    gameCard.setAttribute("data-name", card.name); // Agregar nombre como atributo

                    collection?.appendChild(gameCard);
                }
            }
        }

        // async function handleSearch(event) {
        // event.preventDefault();
        // const formData = new FormData(event.target);
        // const urlParams = new URLSearchParams();
        // for (const [key, value] of formData.entries())
        // if (value.toString().trim() !== "")
        // urlParams.append(key, value.toString());
        // cards = await fetchCards(`?${urlParams.toString()}`);
        // populateCollection(cards);
        // }

        const response = await fetch(`${API_URL}/api/v1/session`, {
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
            },
            credentials: "include",
        });

        if (response.status !== 200) window.location.replace(`/login`);

        const user = await response.json();

        if (user.privilege !== "Administrator")
            window.location.replace(`/dashboard`);

        let cards = await fetchCards();
        populateCollection(cards);

        document
            .querySelectorAll("input[name=grouping]")
            .forEach((input) =>
                input.addEventListener("change", () =>
                    populateCollection(cards)
                )
            );

        // document
        // .getElementById(formId)
        // .addEventListener("submit", handleSearch);

        document.addEventListener("DOMContentLoaded", () => {
            // Modal handling
            document
                .querySelectorAll(".js-modal-trigger")
                .forEach((trigger) => {
                    const modalId = trigger.getAttribute("data-target");
                    const modal = document.getElementById(modalId);
                    if (modal) {
                        trigger.addEventListener("click", () => {
                            modal.classList.add("is-active");
                        });
                    }
                });

            document
                .querySelectorAll(
                    ".modal .delete, .js-modal-close, .modal-background"
                )
                .forEach((close) => {
                    close.addEventListener("click", () => {
                        close.closest(".modal").classList.remove("is-active");
                    });
                });

            document
                .querySelector("#deleteModal .button.is-danger")
                .addEventListener("click", async () => {
                    const cardName = document
                        .querySelector("#deleteModal input")
                        .value.trim();
                    if (cardName === "") {
                        alert("Please enter the card name to delete.");
                        return;
                    }

                    const deleted = await deleteCard(cardName);
                    if (deleted) {
                        const cardElement = document.querySelector(
                            `.card[data-name="${cardName}"]`
                        );
                        if (cardElement) {
                            cardElement.remove();
                        }
                        alert(`Card ${cardName} deleted successfully.`);
                    } else {
                        alert(`Error deleting card ${cardName}.`);
                    }

                    // Cerrar el modal
                    document
                        .getElementById("deleteModal")
                        .classList.remove("is-active");
                });
        });

        document
        .getElementById("delete-card-button")
        ?.addEventListener("click", async () => {
            const cardName = document.querySelector("#deleteModal input").value.trim();

            if (!cardName) {
                alert("Please enter the card name to delete.");
                return;
            }

            const response = await fetch(`${API_URL}/api/v1/cards/${cardName}`, {
                method: "DELETE",
                credentials: "include",
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json",
                },
            });

            if (response.status === 204) {
                alert(`Card "${cardName}" deleted successfully.`);
                document.querySelector(`.card[data-name="${cardName}"]`)?.remove();
                window.location.reload();
            } else {
                console.error("Error deleting card:", response);
                alert("Failed to delete card. Please try again.");
            }
            document.getElementById("deleteModal").classList.remove("is-active");
        });

        document
    .getElementById("addCardForm")
    ?.addEventListener("submit", async (event) => {
        event.preventDefault();

        const form = event.target 
        const request = Object.fromEntries(new FormData(form));


        try {
            const response = await fetch(`${API_URL}/api/v1/cards`, {
    
                method: "POST",
                credentials: "include",
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json",
                },
                body:JSON.stringify(request)
            });

            if (response.ok) {
                window.location.reload()
            } else {
                const errorData = await response.json().catch(() => null);
                console.error("Error adding card:", response.status, errorData);
                alert("Failed to add card. Please try again.");
            }
        } catch (error) {
            console.error("Request failed:", error);
            alert("An error occurred while adding the card.");
        } 
    }); 

    </script>

    <UserPortalNavbar />
    <main>
        <ProfileDashboard />

        <section class="collection p-5">
            <StickyTopbar>
                <RadioTabs>
                    <li>
                        <label>
                            Season
                            <input
                                checked
                                name="grouping"
                                value="season"
                                type="radio"
                                autocomplete="off"
                            />
                        </label>
                    </li>
                </RadioTabs>

                <div class="buttons-container">
                    <button
                        class="button is-success js-modal-trigger"
                        data-target="addModal">Add Card</button
                    >
                    <button
                        class="button is-danger js-modal-trigger"
                        data-target="deleteModal">Delete Card</button
                    >
                </div>

                <div id="addModal" class="modal">
                    <div class="modal-background"></div>
                    <div class="modal-card">
                        <header class="modal-card-head">
                            <p class="modal-card-title">Add Card</p>
                            <button
                                class="delete js-modal-close"
                                aria-label="close"></button>
                        </header>
                        <section class="modal-card-body">
                            <form id="addCardForm">
                                <div class="field">
                                    <label class="label">Card name</label>
                                    <div class="control">
                                        <input
                                            name="name"
                                            class="input"
                                            type="text"
                                            placeholder="Enter card title"
                                            required
                                        />
                                    </div>

                                    <label class="label">Card title</label>
                                    <div class="control">
                                        <input
                                            name="title"
                                            class="input"
                                            type="text"
                                            placeholder="Enter card title"
                                            required
                                        />
                                    </div>

                                    <label class="label">Season</label>
                                    <div class="control">
                                        <input
                                            name="season"
                                            class="input"
                                            type="text"
                                            placeholder="Enter season"
                                            required
                                        />
                                    </div>

                                    <label class="label">Biohazard lvl</label>
                                    <div class="control">
                                        <input
                                            name="rarity"
                                            class="input"
                                            type="text"
                                            placeholder="Enter biohazard level"
                                            required
                                        />
                                    </div>
                                </div>
                                <div class="field">
                                    <label class="label">Card Description</label
                                    >
                                    <div class="control">
                                        <textarea
                                            name="description"
                                            class="textarea"
                                            placeholder="Enter description"
                                            required></textarea>
                                    </div>
                                </div>
                            </form>
                        </section>
                        <footer class="modal-card-foot">
                            <button
                                class="button is-success"
                                type="submit" 
                                form="addCardForm"
                                id="add-card-button">
                                Save</button>
                            <button class="button js-modal-close">
                                Cancel</button>
                        </footer>
                    </div>
                </div>

                <div id="deleteModal" class="modal">
                    <div class="modal-background"></div>
                    <div class="modal-card">
                        <header class="modal-card-head">
                            <p class="modal-card-title">Delete Card</p>
                            <button 
                                class="delete js-modal-close" 
                                aria-label="close"></button>
                        </header>
                        <section class="modal-card-body">
                            <label class="label">
                                Enter Card Name to Delete</label>
                            <div class="control">
                                <input 
                                    class="input" 
                                    type="text" 
                                    placeholder="Enter card name"/>
                            </div>  
                        </section>
                        <footer class="modal-card-foot">
                            <button 
                                class="button is-danger" 
                                id="delete-card-button">
                                Delete</button>
                            <button 
                                class="button js-modal-close">
                                Cancel</button>
                        </footer>
                    </div>
                </div>
            </StickyTopbar>

            <h1
                id={emptyResultMessageId}
                class="is-hidden subtitle has-text-centered"
            >
                No cards to display.
            </h1>
            <div class="cards"></div>
        </section>
    </main>
</GenericLayout>

<style is:global>
    .collection > .cards {
        display: grid;
        height: 100%;
        gap: 10px;
        justify-content: space-between;
        align-content: space-around;
        grid-template-columns: repeat(auto-fill, 2.5in);
        grid-auto-rows: auto;
    }

    .collection > .cards > h1 {
        grid-column: 1 / -1;
        border-bottom: 1px solid var(--bulma-body-color);
        font-size: var(--bulma-size-3);
        margin: 0;
        margin-top: var(--bulma-size-6);
    }

    .cards > h1:first-child {
        margin-top: 0;
    }
</style>

<style>
    @import url("https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap");

    :global(:root) {
        --bulma-body-background-color: #8bc6ec;
    }

    body {
        font-family: "Open Sans";
    }

    .stats-flex {
        gap: 20px;
    }

    .buttons-container {
        display: flex;
        flex-wrap: wrap;
        position: absolute;
        left: 1000px;
        height: 60px;
    }

    @media screen and (max-width: 1200px) {
        .buttons-container {
            left: 900px;
        }
    }

    @media screen and (max-width: 992px) {
        .buttons-container {
            position: static;
            margin-left: 500px;
        }
    }

    @media screen and (max-width: 768px) {
        .buttons-container {
            flex-direction: column;
            align-items: center;
            height: auto;
            margin: 10px;
        }
    }

    .collection > .cards {
        display: grid;
        height: 100%;
        gap: 10px;
        justify-content: space-between;
        align-content: space-around;
        grid-template-columns: repeat(auto-fill, 2.5in);
        grid-auto-rows: auto;
    }

    .filter {
        position: sticky;
        top: 0;
        display: flex;
        background-color: var(--bulma-body-background-color);
        gap: 20px;
        height: var(--logo-height);
    }

    .section.is-medium {
        margin-bottom: 100px;
        padding-bottom: 5px;
    }

    .collection .cards {
        margin-top: 10px;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const modalTriggers = document.querySelectorAll(".js-modal-trigger");
        modalTriggers.forEach((trigger) => {
            const modalId = trigger.getAttribute("data-target");
            if (modalId) {
                const modal = document.getElementById(modalId);
                if (modal) {
                    trigger.addEventListener("click", () => {
                        modal.classList.add("is-active");
                    });
                }
            }
        });

        const modalCloses = document.querySelectorAll(
            ".modal .delete, .js-modal-close, .modal-background"
        );
        modalCloses.forEach((close) => {
            close.addEventListener("click", () => {
                const modal = close.closest(".modal");
                if (modal) {
                    modal.classList.remove("is-active");
                }
            });
        });
    });
</script>
