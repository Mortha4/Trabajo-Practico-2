<script>
    import { API_URL } from "astro:env/client";
    import fetchUser from "../scripts/fetchUser";
    import moment from "moment";

    const user = await fetchUser();
    class CardPack extends HTMLElement {
        //atributo html
        static observedAttributes = [
            "title",
            "class",
            "wrapperimageurl",
            "cooldown",
            "lastopened",
        ];
        //atributo del objeto
        #shadowRoot;

        constructor() {
            super();
            let template = document.getElementById("card-pack-template"); //clona el template
            //@ts-ignore
            let templateContent = template.content;
            this.#shadowRoot = this.attachShadow({ mode: "open" });
            this.#shadowRoot.appendChild(templateContent.cloneNode(true));

            //boton popup

            // OPen modal
            const modalTriggers =
                this.#shadowRoot.querySelectorAll(".js-modal-trigger");
            modalTriggers.forEach((trigger) => {
                const modalId = trigger.getAttribute("data-target");
                if (modalId) {
                    // Verify that modalId is not null
                    const modal = this.#shadowRoot.getElementById(modalId);
                    if (modal) {
                        // Verify that the modal exists
                        trigger.addEventListener("click", () => {
                            modal.classList.add("is-active");
                        });
                    }
                }
            });

            // Close modal
            const modalCloses = this.#shadowRoot.querySelectorAll(
                ".modal .delete, .js-modal-close, .modal-background"
            );
            modalCloses.forEach((close) => {
                close.addEventListener("click", () => {
                    const modal = close.closest(".modal");
                    if (modal) {
                        //Verify that the modal exists
                        modal.classList.remove("is-active");
                    }
                });
            });
        }

        populateCardPack(cards: any[]) {
            const card_container = this.#shadowRoot.querySelector(
                ".cards_container"
            ) as HTMLDivElement;
            card_container.innerHTML = "";

            for (const card of cards) {
                const CardNuevo =
                    this.#shadowRoot.ownerDocument.createElement("game-card");
                CardNuevo.setAttribute("title", card.title);
                CardNuevo.setAttribute("description", card.description);
                CardNuevo.setAttribute("rarity", card.rarity);
                CardNuevo.setAttribute("art-url", card.artUrl);
                card_container.appendChild(CardNuevo);
            }
        }

        activatebuttom() {
            //inserta un texto y habilita el boton

            this.#shadowRoot!.querySelector(".boton")!.textContent = "OPEN";
            this.#shadowRoot!.querySelector(".boton")?.removeAttribute(
                "disabled"
            );
        }

        disablebuttom() {
            this.#shadowRoot!.querySelector(".boton")!.setAttribute(
                "disabled",
                "true"
            );
        }

        async postCardpackopenings() {
            const cardpacksResponse = await fetch(
                `${API_URL}/api/v1/users/${user.username}/cardpacks/${this.getAttribute("name")}/openings`,
                {
                    headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                    },
                    method: "POST",
                    credentials: "include",
                }
            );
            if (cardpacksResponse.status === 200)
                return await cardpacksResponse.json();
            else console.error(cardpacksResponse);
        }

        async open_card() {
            this.setAttribute("lastopened", moment().toISOString());

            let cards = await this.postCardpackopenings();
            console.log(cards);
            this.populateCardPack(cards);
        }

        connectedCallback() {
            setInterval(() => {
                let cooldown = this.getAttribute("cooldown");
                let lastopened = this.getAttribute("lastopened"); //toma el valor mas reciente de lastopened

                if (cooldown === null || cooldown === "null") {
                    return;
                }

                if (lastopened === "null") {
                    this.activatebuttom();
                    return;
                }

                let moment_cooldown = moment.duration(cooldown);
                let moment_lastopened = moment(lastopened);
                let current_date = moment();

                let next_open = moment_lastopened.add(moment_cooldown);
                let timer = next_open.diff(current_date);

                if (timer > 0) {
                    let cronometro = moment.utc(timer).format("HH:mm:ss");
                    this.#shadowRoot!.querySelector(".boton")!.textContent =
                        cronometro;
                    this.disablebuttom();
                } else {
                    this.activatebuttom();
                }
            }, 1000);

            this.#shadowRoot
                .querySelector(".boton")
                ?.addEventListener("click", () => {
                    this.open_card();
                });
        }

        attributeChangedCallback(
            name: string,
            oldValue: string,
            newValue: string
        ) {
            switch (name) {
                case "title":
                    this.#shadowRoot.querySelector(".pack-title")!.textContent =
                        newValue;
                    break;
                case "wrapperimageurl":
                    this.#shadowRoot
                        .querySelector(".img_card-pack")
                        ?.setAttribute("src", newValue ?? "logo-pack.png");
                    break;
            }
        }
    }
    customElements.define("card-pack", CardPack);
</script>

<template id="card-pack-template">
    <style is:inline>
        @import url("https://cdn.jsdelivr.net/npm/bulma@1.0.2/css/bulma.min.css");
        @import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css");

        .pack-title {
            color: black;
            font-size: 20px;
        }

        .modal-card {
            width: 50%;
        }

        .cards_container {
            display: grid;
            gap: 10px;
            grid-template-columns: repeat(
                auto-fill,
                minmax(250px, 1fr)
            ); /* Ajuste din√°mico */
            grid-auto-rows: auto;
            justify-content: center; /* Centra las cartas */
            align-content: start; /* Alinea las cartas desde el inicio del contenedor */
            padding: 10px; /* Agrega algo de espacio dentro del contenedor */
        }

        .card-pack {
            display: flex;
            background-image: radial-gradient(
                circle 1224px at 10.6% 8.8%,
                rgba(255, 255, 255, 1) 0%,
                rgba(153, 202, 251, 1) 100.2%
            );
            width: 250px;
            height: 350px;
            border-radius: 10px;
            padding: 16px 8px;
            margin: 5px;
            gap: 20px;
            box-shadow: -3px 7px 7px -7px rgba(0, 0, 0, 0.75);
        }

        .img_card-pack {
            height: 200px;
        }

        .title_card-pack {
            font-family: "Courier New", Courier, monospace;
            color: rgb(0, 0, 0);
        }

        .boton {
            background-image: linear-gradient(
                to right,
                #232526 0%,
                #414345 51%,
                #232526 100%
            );
        }
        .boton {
            margin: 10px;
            padding: 15px 45px;
            text-align: center;
            text-transform: uppercase;
            transition: 0.5s;
            background-size: 200% auto;
            color: white;
            box-shadow: 0 0 20px #eee;
            border-radius: 10px;
            display: block;
        }

        .boton:hover {
            background-position: right center; /* change the direction of the change here */
            color: #fff;
            text-decoration: none;
        }

        .modal {
            z-index: 100;
        }
    </style>

    <div
        class="card-pack is-flex is-justify-content-center is-align-content-center"
    >
        <div>
            <!-- titulo de paquete -->
            <h1 class="pack-title is-flex is-justify-content-center"></h1>

            <!-- imagen de paquete -->
            <img class="img_card-pack" alt="imagen" />

            <!-- boton de abrir -->
            <div class="box-buttom is-flex is-justify-content-center">
                <button
                    disabled
                    class="boton popup-btn js-modal-trigger"
                    data-target="modal-example"></button>
            </div>

            <!-- ventana emergente de abrir -->

            <div id="modal-example" class="modal">
                <div class="modal-background"></div>

                <div class="modal-card">
                    <header class="modal-card-head">
                        <p class="modal-card-title has-text-centered">
                            Cartas desbloqueadas
                        </p>
                    </header>

                    <section class="modal-card-body is-justify-content-center">
                        <div
                            class="is-flex is-justify-content-space-around is-align-items-stretch is-flex-wrap-wrap"
                        >
                            <div class="cards_container">
                                <game-card class="is-skeleton"></game-card>
                                <game-card class="is-skeleton"></game-card>
                                <game-card class="is-skeleton"></game-card>
                            </div>
                        </div>
                    </section>
                </div>
            </div>
        </div>
    </div>
</template>
